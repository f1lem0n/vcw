import datetime
import random


configfile: config["root_dir"] + "workflow/configs/params.yaml"


current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H%M%S")

mood, _ = glob_wildcards(config["working_dir"] + "input/audio/{mood}/{filename}.mp3")
selected_mood = random.choice(list(set(mood)))


if config["upload"]:

    rule all:
        input:
            config["working_dir"] + "output/combined_audio/" + current_datetime + ".mp3",
            config["working_dir"] + "output/tracklist/" + current_datetime + ".txt",
            config["working_dir"] + "output/video/" + current_datetime + ".mp4",
            config["working_dir"] + "output/description/" + current_datetime + ".txt",
            config["working_dir"] + "output/title/" + current_datetime + ".txt",
            config["working_dir"] + "output/uploaded/" + current_datetime + ".txt",

else:

    rule all:
        input:
            config["working_dir"] + "output/combined_audio/" + current_datetime + ".mp3",
            config["working_dir"] + "output/tracklist/" + current_datetime + ".txt",
            config["working_dir"] + "output/video/" + current_datetime + ".mp4",
            config["working_dir"] + "output/description/" + current_datetime + ".txt",
            config["working_dir"] + "output/title/" + current_datetime + ".txt",


rule combine_audio:
    """
    Combine audio files into one file and get the tracklist.
    """
    input:
        config["working_dir"] + "input/audio/" + selected_mood,
    output:
        combined_audio=config["working_dir"]
        + "output/combined_audio/"
        + current_datetime
        + ".mp3",
        tracklist=config["working_dir"]
        + "output/tracklist/"
        + current_datetime
        + ".txt",
    log:
        config["working_dir"] + "log/combine_audio/" + current_datetime + ".log",
    benchmark:
        config["working_dir"] + "benchmark/combine_audio/" + current_datetime + ".txt"
    params:
        script=config["root_dir"] + "workflow/scripts/combine_audio.py",
        target_length=config["target_length"],
    conda:
        config["root_dir"] + "envs/combine_audio.yaml"
    shell:
        """
        python3 {params.script} {input} {params.target_length} \
        {output.combined_audio} {output.tracklist} &> {log}
        """


rule create_video:
    """
    Create a video from the combined audio and random image.
    """
    input:
        audio=rules.combine_audio.output.combined_audio,
        images_path=config["working_dir"] + "input/images/" + selected_mood,
    output:
        config["working_dir"] + "output/video/" + current_datetime + ".mp4",
    log:
        config["working_dir"] + "log/create_video/" + current_datetime + ".log",
    benchmark:
        config["working_dir"] + "benchmark/create_video/" + current_datetime + ".txt"
    params:
        script=config["root_dir"] + "workflow/scripts/create_video.py",
    conda:
        config["root_dir"] + "envs/create_video.yaml"
    shell:
        """
        python3 {params.script} {input.images_path} \
        {input.audio} {output} &> {log}
        """


rule create_video_info:
    """
    Create the description and title for the YouTube video.
    """
    input:
        description_template=config["working_dir"]
        + "input/description_templates/"
        + selected_mood
        + ".txt",
        tracklist=rules.combine_audio.output.tracklist,
        titles=config["working_dir"] + "input/titles.txt",
    output:
        description=config["working_dir"]
        + "output/description/"
        + current_datetime
        + ".txt",
        title=config["working_dir"] + "output/title/" + current_datetime + ".txt",
    log:
        config["working_dir"] + "log/create_video_info/" + current_datetime + ".log",
    benchmark:
        (
            config["working_dir"]
            + "benchmark/create_video_info/"
            + current_datetime
            + ".txt"
        )
    params:
        script=config["root_dir"] + "workflow/scripts/create_video_info.py",
        mood=selected_mood,
    shell:
        """
        python3 {params.script} {input.description_template} \
        {input.tracklist} {input.titles} {output.description} \
        {output.title} &> {log}
        """


rule upload_video:
    """
    Upload the video to YouTube.
    """
    input:
        video=rules.create_video.output,
        title=rules.create_video_info.output.title,
        description=rules.create_video_info.output.description,
        keywords=config["working_dir"] + "input/keywords/" + selected_mood + ".txt",
    output:
        config["working_dir"] + "output/uploaded/" + current_datetime + ".txt",
    log:
        config["working_dir"] + "log/upload_video/" + current_datetime + ".log",
    benchmark:
        config["working_dir"] + "benchmark/upload_video/" + current_datetime + ".txt"
    params:
        script=config["root_dir"] + "workflow/scripts/upload_video.py",
        account=config["yt_account"],
        secrets_path=config["root_dir"] + "workflow/secrets/",
    shell:
        """
        python3 {params.script} \
        --yt_account="{params.account}" \
        --secrets_path="{params.secrets_path}" \
        --file="{input.video}" \
        --title="$(cat {input.title})" \
        --description="$(cat {input.description})" \
        --keywords="$(cat {input.keywords})" \
        --category="10" \
        --privacyStatus="private" \
        --noauth_local_webserver &> {log}
        touch {output}
        """
